//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReferenceVirWallet {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="User")]
    [System.SerializableAttribute()]
    public class UserList : System.Collections.Generic.List<Client.ServiceReferenceVirWallet.User> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class User : Client.ServiceReferenceVirWallet.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FreeBalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PermissionLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthdate {
            get {
                return this.BirthdateField;
            }
            set {
                if ((this.BirthdateField.Equals(value) != true)) {
                    this.BirthdateField = value;
                    this.RaisePropertyChanged("Birthdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FreeBalance {
            get {
                return this.FreeBalanceField;
            }
            set {
                if ((this.FreeBalanceField.Equals(value) != true)) {
                    this.FreeBalanceField = value;
                    this.RaisePropertyChanged("FreeBalance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PermissionLevel {
            get {
                return this.PermissionLevelField;
            }
            set {
                if ((this.PermissionLevelField.Equals(value) != true)) {
                    this.PermissionLevelField = value;
                    this.RaisePropertyChanged("PermissionLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ServiceReferenceVirWallet.ForeignExchange))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ServiceReferenceVirWallet.Stock))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ServiceReferenceVirWallet.StockTransaction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ServiceReferenceVirWallet.ForeignExchangeWallet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ServiceReferenceVirWallet.StockWallet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ServiceReferenceVirWallet.User))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForeignExchange", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class ForeignExchange : Client.ServiceReferenceVirWallet.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrencyCode {
            get {
                return this.CurrencyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyCodeField, value) != true)) {
                    this.CurrencyCodeField = value;
                    this.RaisePropertyChanged("CurrencyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrencyName {
            get {
                return this.CurrencyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyNameField, value) != true)) {
                    this.CurrencyNameField = value;
                    this.RaisePropertyChanged("CurrencyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Stock", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Stock : Client.ServiceReferenceVirWallet.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StockNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StockSymbolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StockName {
            get {
                return this.StockNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StockNameField, value) != true)) {
                    this.StockNameField = value;
                    this.RaisePropertyChanged("StockName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StockSymbol {
            get {
                return this.StockSymbolField;
            }
            set {
                if ((object.ReferenceEquals(this.StockSymbolField, value) != true)) {
                    this.StockSymbolField = value;
                    this.RaisePropertyChanged("StockSymbol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForeignExchangeTransaction", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class ForeignExchangeTransaction : Client.ServiceReferenceVirWallet.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BuyOrSellField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrencyAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrencyValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateSignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReferenceVirWallet.ForeignExchange ForeignExchangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReferenceVirWallet.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BuyOrSell {
            get {
                return this.BuyOrSellField;
            }
            set {
                if ((this.BuyOrSellField.Equals(value) != true)) {
                    this.BuyOrSellField = value;
                    this.RaisePropertyChanged("BuyOrSell");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrencyAmount {
            get {
                return this.CurrencyAmountField;
            }
            set {
                if ((this.CurrencyAmountField.Equals(value) != true)) {
                    this.CurrencyAmountField = value;
                    this.RaisePropertyChanged("CurrencyAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrencyValue {
            get {
                return this.CurrencyValueField;
            }
            set {
                if ((this.CurrencyValueField.Equals(value) != true)) {
                    this.CurrencyValueField = value;
                    this.RaisePropertyChanged("CurrencyValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateSignature {
            get {
                return this.DateSignatureField;
            }
            set {
                if ((this.DateSignatureField.Equals(value) != true)) {
                    this.DateSignatureField = value;
                    this.RaisePropertyChanged("DateSignature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReferenceVirWallet.ForeignExchange ForeignExchange {
            get {
                return this.ForeignExchangeField;
            }
            set {
                if ((object.ReferenceEquals(this.ForeignExchangeField, value) != true)) {
                    this.ForeignExchangeField = value;
                    this.RaisePropertyChanged("ForeignExchange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReferenceVirWallet.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockTransaction", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class StockTransaction : Client.ServiceReferenceVirWallet.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BuyOrSellField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateSignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReferenceVirWallet.Stock StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double StockValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReferenceVirWallet.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BuyOrSell {
            get {
                return this.BuyOrSellField;
            }
            set {
                if ((this.BuyOrSellField.Equals(value) != true)) {
                    this.BuyOrSellField = value;
                    this.RaisePropertyChanged("BuyOrSell");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateSignature {
            get {
                return this.DateSignatureField;
            }
            set {
                if ((this.DateSignatureField.Equals(value) != true)) {
                    this.DateSignatureField = value;
                    this.RaisePropertyChanged("DateSignature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReferenceVirWallet.Stock Stock {
            get {
                return this.StockField;
            }
            set {
                if ((object.ReferenceEquals(this.StockField, value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockAmount {
            get {
                return this.StockAmountField;
            }
            set {
                if ((this.StockAmountField.Equals(value) != true)) {
                    this.StockAmountField = value;
                    this.RaisePropertyChanged("StockAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double StockValue {
            get {
                return this.StockValueField;
            }
            set {
                if ((this.StockValueField.Equals(value) != true)) {
                    this.StockValueField = value;
                    this.RaisePropertyChanged("StockValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReferenceVirWallet.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForeignExchangeWallet", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class ForeignExchangeWallet : Client.ServiceReferenceVirWallet.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrencyAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReferenceVirWallet.ForeignExchange ForeignExchangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReferenceVirWallet.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrencyAmount {
            get {
                return this.CurrencyAmountField;
            }
            set {
                if ((this.CurrencyAmountField.Equals(value) != true)) {
                    this.CurrencyAmountField = value;
                    this.RaisePropertyChanged("CurrencyAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReferenceVirWallet.ForeignExchange ForeignExchange {
            get {
                return this.ForeignExchangeField;
            }
            set {
                if ((object.ReferenceEquals(this.ForeignExchangeField, value) != true)) {
                    this.ForeignExchangeField = value;
                    this.RaisePropertyChanged("ForeignExchange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReferenceVirWallet.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockWallet", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class StockWallet : Client.ServiceReferenceVirWallet.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReferenceVirWallet.Stock StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ServiceReferenceVirWallet.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReferenceVirWallet.Stock Stock {
            get {
                return this.StockField;
            }
            set {
                if ((object.ReferenceEquals(this.StockField, value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockAmount {
            get {
                return this.StockAmountField;
            }
            set {
                if ((this.StockAmountField.Equals(value) != true)) {
                    this.StockAmountField = value;
                    this.RaisePropertyChanged("StockAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ServiceReferenceVirWallet.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ForeignExchangeList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="ForeignExchange")]
    [System.SerializableAttribute()]
    public class ForeignExchangeList : System.Collections.Generic.List<Client.ServiceReferenceVirWallet.ForeignExchange> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="StockList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Stock")]
    [System.SerializableAttribute()]
    public class StockList : System.Collections.Generic.List<Client.ServiceReferenceVirWallet.Stock> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ForeignExchangeTransactionList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="ForeignExchangeTransaction")]
    [System.SerializableAttribute()]
    public class ForeignExchangeTransactionList : System.Collections.Generic.List<Client.ServiceReferenceVirWallet.ForeignExchangeTransaction> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="StockTransactionList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="StockTransaction")]
    [System.SerializableAttribute()]
    public class StockTransactionList : System.Collections.Generic.List<Client.ServiceReferenceVirWallet.StockTransaction> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ForeignExchangeWalletList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="ForeignExchangeWallet")]
    [System.SerializableAttribute()]
    public class ForeignExchangeWalletList : System.Collections.Generic.List<Client.ServiceReferenceVirWallet.ForeignExchangeWallet> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="StockWalletList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="StockWallet")]
    [System.SerializableAttribute()]
    public class StockWalletList : System.Collections.Generic.List<Client.ServiceReferenceVirWallet.StockWallet> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceVirWallet.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllUsers", ReplyAction="http://tempuri.org/IService/SelectAllUsersResponse")]
        Client.ServiceReferenceVirWallet.UserList SelectAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllUsers", ReplyAction="http://tempuri.org/IService/SelectAllUsersResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.UserList> SelectAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertUser", ReplyAction="http://tempuri.org/IService/InsertUserResponse")]
        int InsertUser(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertUser", ReplyAction="http://tempuri.org/IService/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        int UpdateUser(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateUser", ReplyAction="http://tempuri.org/IService/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        int DeleteUser(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteUser", ReplyAction="http://tempuri.org/IService/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        Client.ServiceReferenceVirWallet.User Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.User> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Signup", ReplyAction="http://tempuri.org/IService/SignupResponse")]
        int Signup(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Signup", ReplyAction="http://tempuri.org/IService/SignupResponse")]
        System.Threading.Tasks.Task<int> SignupAsync(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllForeignExchanges", ReplyAction="http://tempuri.org/IService/SelectAllForeignExchangesResponse")]
        Client.ServiceReferenceVirWallet.ForeignExchangeList SelectAllForeignExchanges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllForeignExchanges", ReplyAction="http://tempuri.org/IService/SelectAllForeignExchangesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeList> SelectAllForeignExchangesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertForeignExchange", ReplyAction="http://tempuri.org/IService/InsertForeignExchangeResponse")]
        int InsertForeignExchange(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertForeignExchange", ReplyAction="http://tempuri.org/IService/InsertForeignExchangeResponse")]
        System.Threading.Tasks.Task<int> InsertForeignExchangeAsync(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateForeignExchange", ReplyAction="http://tempuri.org/IService/UpdateForeignExchangeResponse")]
        int UpdateForeignExchange(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateForeignExchange", ReplyAction="http://tempuri.org/IService/UpdateForeignExchangeResponse")]
        System.Threading.Tasks.Task<int> UpdateForeignExchangeAsync(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteForeignExchange", ReplyAction="http://tempuri.org/IService/DeleteForeignExchangeResponse")]
        int DeleteForeignExchange(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteForeignExchange", ReplyAction="http://tempuri.org/IService/DeleteForeignExchangeResponse")]
        System.Threading.Tasks.Task<int> DeleteForeignExchangeAsync(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllStocks", ReplyAction="http://tempuri.org/IService/SelectAllStocksResponse")]
        Client.ServiceReferenceVirWallet.StockList SelectAllStocks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllStocks", ReplyAction="http://tempuri.org/IService/SelectAllStocksResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockList> SelectAllStocksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertStock", ReplyAction="http://tempuri.org/IService/InsertStockResponse")]
        int InsertStock(Client.ServiceReferenceVirWallet.Stock stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertStock", ReplyAction="http://tempuri.org/IService/InsertStockResponse")]
        System.Threading.Tasks.Task<int> InsertStockAsync(Client.ServiceReferenceVirWallet.Stock stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStock", ReplyAction="http://tempuri.org/IService/UpdateStockResponse")]
        int UpdateStock(Client.ServiceReferenceVirWallet.Stock stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStock", ReplyAction="http://tempuri.org/IService/UpdateStockResponse")]
        System.Threading.Tasks.Task<int> UpdateStockAsync(Client.ServiceReferenceVirWallet.Stock stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteStock", ReplyAction="http://tempuri.org/IService/DeleteStockResponse")]
        int DeleteStock(Client.ServiceReferenceVirWallet.Stock stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteStock", ReplyAction="http://tempuri.org/IService/DeleteStockResponse")]
        System.Threading.Tasks.Task<int> DeleteStockAsync(Client.ServiceReferenceVirWallet.Stock stock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllForeignExchangeTransactions", ReplyAction="http://tempuri.org/IService/SelectAllForeignExchangeTransactionsResponse")]
        Client.ServiceReferenceVirWallet.ForeignExchangeTransactionList SelectAllForeignExchangeTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllForeignExchangeTransactions", ReplyAction="http://tempuri.org/IService/SelectAllForeignExchangeTransactionsResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeTransactionList> SelectAllForeignExchangeTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectForeignExchangeTransactionsByUser", ReplyAction="http://tempuri.org/IService/SelectForeignExchangeTransactionsByUserResponse")]
        Client.ServiceReferenceVirWallet.ForeignExchangeTransactionList SelectForeignExchangeTransactionsByUser(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectForeignExchangeTransactionsByUser", ReplyAction="http://tempuri.org/IService/SelectForeignExchangeTransactionsByUserResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeTransactionList> SelectForeignExchangeTransactionsByUserAsync(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertForeignExchangeTransaction", ReplyAction="http://tempuri.org/IService/InsertForeignExchangeTransactionResponse")]
        int InsertForeignExchangeTransaction(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertForeignExchangeTransaction", ReplyAction="http://tempuri.org/IService/InsertForeignExchangeTransactionResponse")]
        System.Threading.Tasks.Task<int> InsertForeignExchangeTransactionAsync(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateForeignExchangeTransaction", ReplyAction="http://tempuri.org/IService/UpdateForeignExchangeTransactionResponse")]
        int UpdateForeignExchangeTransaction(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateForeignExchangeTransaction", ReplyAction="http://tempuri.org/IService/UpdateForeignExchangeTransactionResponse")]
        System.Threading.Tasks.Task<int> UpdateForeignExchangeTransactionAsync(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteForeignExchangeTransaction", ReplyAction="http://tempuri.org/IService/DeleteForeignExchangeTransactionResponse")]
        int DeleteForeignExchangeTransaction(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteForeignExchangeTransaction", ReplyAction="http://tempuri.org/IService/DeleteForeignExchangeTransactionResponse")]
        System.Threading.Tasks.Task<int> DeleteForeignExchangeTransactionAsync(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllStockTransactions", ReplyAction="http://tempuri.org/IService/SelectAllStockTransactionsResponse")]
        Client.ServiceReferenceVirWallet.StockTransactionList SelectAllStockTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllStockTransactions", ReplyAction="http://tempuri.org/IService/SelectAllStockTransactionsResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockTransactionList> SelectAllStockTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectStockTransactionsByUser", ReplyAction="http://tempuri.org/IService/SelectStockTransactionsByUserResponse")]
        Client.ServiceReferenceVirWallet.StockTransactionList SelectStockTransactionsByUser(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectStockTransactionsByUser", ReplyAction="http://tempuri.org/IService/SelectStockTransactionsByUserResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockTransactionList> SelectStockTransactionsByUserAsync(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertStockTransaction", ReplyAction="http://tempuri.org/IService/InsertStockTransactionResponse")]
        int InsertStockTransaction(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertStockTransaction", ReplyAction="http://tempuri.org/IService/InsertStockTransactionResponse")]
        System.Threading.Tasks.Task<int> InsertStockTransactionAsync(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStockTransaction", ReplyAction="http://tempuri.org/IService/UpdateStockTransactionResponse")]
        int UpdateStockTransaction(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStockTransaction", ReplyAction="http://tempuri.org/IService/UpdateStockTransactionResponse")]
        System.Threading.Tasks.Task<int> UpdateStockTransactionAsync(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteStockTransaction", ReplyAction="http://tempuri.org/IService/DeleteStockTransactionResponse")]
        int DeleteStockTransaction(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteStockTransaction", ReplyAction="http://tempuri.org/IService/DeleteStockTransactionResponse")]
        System.Threading.Tasks.Task<int> DeleteStockTransactionAsync(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllForeignExchangeWallets", ReplyAction="http://tempuri.org/IService/SelectAllForeignExchangeWalletsResponse")]
        Client.ServiceReferenceVirWallet.ForeignExchangeWalletList SelectAllForeignExchangeWallets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllForeignExchangeWallets", ReplyAction="http://tempuri.org/IService/SelectAllForeignExchangeWalletsResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeWalletList> SelectAllForeignExchangeWalletsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectForeignExchangeWalletsByUser", ReplyAction="http://tempuri.org/IService/SelectForeignExchangeWalletsByUserResponse")]
        Client.ServiceReferenceVirWallet.ForeignExchangeWalletList SelectForeignExchangeWalletsByUser(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectForeignExchangeWalletsByUser", ReplyAction="http://tempuri.org/IService/SelectForeignExchangeWalletsByUserResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeWalletList> SelectForeignExchangeWalletsByUserAsync(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertForeignExchangeWallet", ReplyAction="http://tempuri.org/IService/InsertForeignExchangeWalletResponse")]
        int InsertForeignExchangeWallet(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertForeignExchangeWallet", ReplyAction="http://tempuri.org/IService/InsertForeignExchangeWalletResponse")]
        System.Threading.Tasks.Task<int> InsertForeignExchangeWalletAsync(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateForeignExchangeWallet", ReplyAction="http://tempuri.org/IService/UpdateForeignExchangeWalletResponse")]
        int UpdateForeignExchangeWallet(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateForeignExchangeWallet", ReplyAction="http://tempuri.org/IService/UpdateForeignExchangeWalletResponse")]
        System.Threading.Tasks.Task<int> UpdateForeignExchangeWalletAsync(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteForeignExchangeWallet", ReplyAction="http://tempuri.org/IService/DeleteForeignExchangeWalletResponse")]
        int DeleteForeignExchangeWallet(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteForeignExchangeWallet", ReplyAction="http://tempuri.org/IService/DeleteForeignExchangeWalletResponse")]
        System.Threading.Tasks.Task<int> DeleteForeignExchangeWalletAsync(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllStockWallets", ReplyAction="http://tempuri.org/IService/SelectAllStockWalletsResponse")]
        Client.ServiceReferenceVirWallet.StockWalletList SelectAllStockWallets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllStockWallets", ReplyAction="http://tempuri.org/IService/SelectAllStockWalletsResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockWalletList> SelectAllStockWalletsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectStockWalletsByUser", ReplyAction="http://tempuri.org/IService/SelectStockWalletsByUserResponse")]
        Client.ServiceReferenceVirWallet.StockWalletList SelectStockWalletsByUser(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectStockWalletsByUser", ReplyAction="http://tempuri.org/IService/SelectStockWalletsByUserResponse")]
        System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockWalletList> SelectStockWalletsByUserAsync(Client.ServiceReferenceVirWallet.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertStockWallet", ReplyAction="http://tempuri.org/IService/InsertStockWalletResponse")]
        int InsertStockWallet(Client.ServiceReferenceVirWallet.StockWallet stockWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertStockWallet", ReplyAction="http://tempuri.org/IService/InsertStockWalletResponse")]
        System.Threading.Tasks.Task<int> InsertStockWalletAsync(Client.ServiceReferenceVirWallet.StockWallet stockWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStockWallet", ReplyAction="http://tempuri.org/IService/UpdateStockWalletResponse")]
        int UpdateStockWallet(Client.ServiceReferenceVirWallet.StockWallet stockWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateStockWallet", ReplyAction="http://tempuri.org/IService/UpdateStockWalletResponse")]
        System.Threading.Tasks.Task<int> UpdateStockWalletAsync(Client.ServiceReferenceVirWallet.StockWallet stockWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteStockWallet", ReplyAction="http://tempuri.org/IService/DeleteStockWalletResponse")]
        int DeleteStockWallet(Client.ServiceReferenceVirWallet.StockWallet stockWallet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteStockWallet", ReplyAction="http://tempuri.org/IService/DeleteStockWalletResponse")]
        System.Threading.Tasks.Task<int> DeleteStockWalletAsync(Client.ServiceReferenceVirWallet.StockWallet stockWallet);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.ServiceReferenceVirWallet.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.ServiceReferenceVirWallet.IService>, Client.ServiceReferenceVirWallet.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.ServiceReferenceVirWallet.UserList SelectAllUsers() {
            return base.Channel.SelectAllUsers();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.UserList> SelectAllUsersAsync() {
            return base.Channel.SelectAllUsersAsync();
        }
        
        public int InsertUser(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.InsertUser(user);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public int UpdateUser(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public int DeleteUser(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public Client.ServiceReferenceVirWallet.User Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.User> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public int Signup(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.Signup(user);
        }
        
        public System.Threading.Tasks.Task<int> SignupAsync(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SignupAsync(user);
        }
        
        public Client.ServiceReferenceVirWallet.ForeignExchangeList SelectAllForeignExchanges() {
            return base.Channel.SelectAllForeignExchanges();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeList> SelectAllForeignExchangesAsync() {
            return base.Channel.SelectAllForeignExchangesAsync();
        }
        
        public int InsertForeignExchange(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange) {
            return base.Channel.InsertForeignExchange(foreignExchange);
        }
        
        public System.Threading.Tasks.Task<int> InsertForeignExchangeAsync(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange) {
            return base.Channel.InsertForeignExchangeAsync(foreignExchange);
        }
        
        public int UpdateForeignExchange(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange) {
            return base.Channel.UpdateForeignExchange(foreignExchange);
        }
        
        public System.Threading.Tasks.Task<int> UpdateForeignExchangeAsync(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange) {
            return base.Channel.UpdateForeignExchangeAsync(foreignExchange);
        }
        
        public int DeleteForeignExchange(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange) {
            return base.Channel.DeleteForeignExchange(foreignExchange);
        }
        
        public System.Threading.Tasks.Task<int> DeleteForeignExchangeAsync(Client.ServiceReferenceVirWallet.ForeignExchange foreignExchange) {
            return base.Channel.DeleteForeignExchangeAsync(foreignExchange);
        }
        
        public Client.ServiceReferenceVirWallet.StockList SelectAllStocks() {
            return base.Channel.SelectAllStocks();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockList> SelectAllStocksAsync() {
            return base.Channel.SelectAllStocksAsync();
        }
        
        public int InsertStock(Client.ServiceReferenceVirWallet.Stock stock) {
            return base.Channel.InsertStock(stock);
        }
        
        public System.Threading.Tasks.Task<int> InsertStockAsync(Client.ServiceReferenceVirWallet.Stock stock) {
            return base.Channel.InsertStockAsync(stock);
        }
        
        public int UpdateStock(Client.ServiceReferenceVirWallet.Stock stock) {
            return base.Channel.UpdateStock(stock);
        }
        
        public System.Threading.Tasks.Task<int> UpdateStockAsync(Client.ServiceReferenceVirWallet.Stock stock) {
            return base.Channel.UpdateStockAsync(stock);
        }
        
        public int DeleteStock(Client.ServiceReferenceVirWallet.Stock stock) {
            return base.Channel.DeleteStock(stock);
        }
        
        public System.Threading.Tasks.Task<int> DeleteStockAsync(Client.ServiceReferenceVirWallet.Stock stock) {
            return base.Channel.DeleteStockAsync(stock);
        }
        
        public Client.ServiceReferenceVirWallet.ForeignExchangeTransactionList SelectAllForeignExchangeTransactions() {
            return base.Channel.SelectAllForeignExchangeTransactions();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeTransactionList> SelectAllForeignExchangeTransactionsAsync() {
            return base.Channel.SelectAllForeignExchangeTransactionsAsync();
        }
        
        public Client.ServiceReferenceVirWallet.ForeignExchangeTransactionList SelectForeignExchangeTransactionsByUser(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SelectForeignExchangeTransactionsByUser(user);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeTransactionList> SelectForeignExchangeTransactionsByUserAsync(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SelectForeignExchangeTransactionsByUserAsync(user);
        }
        
        public int InsertForeignExchangeTransaction(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction) {
            return base.Channel.InsertForeignExchangeTransaction(foreignExchangeTransaction);
        }
        
        public System.Threading.Tasks.Task<int> InsertForeignExchangeTransactionAsync(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction) {
            return base.Channel.InsertForeignExchangeTransactionAsync(foreignExchangeTransaction);
        }
        
        public int UpdateForeignExchangeTransaction(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction) {
            return base.Channel.UpdateForeignExchangeTransaction(foreignExchangeTransaction);
        }
        
        public System.Threading.Tasks.Task<int> UpdateForeignExchangeTransactionAsync(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction) {
            return base.Channel.UpdateForeignExchangeTransactionAsync(foreignExchangeTransaction);
        }
        
        public int DeleteForeignExchangeTransaction(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction) {
            return base.Channel.DeleteForeignExchangeTransaction(foreignExchangeTransaction);
        }
        
        public System.Threading.Tasks.Task<int> DeleteForeignExchangeTransactionAsync(Client.ServiceReferenceVirWallet.ForeignExchangeTransaction foreignExchangeTransaction) {
            return base.Channel.DeleteForeignExchangeTransactionAsync(foreignExchangeTransaction);
        }
        
        public Client.ServiceReferenceVirWallet.StockTransactionList SelectAllStockTransactions() {
            return base.Channel.SelectAllStockTransactions();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockTransactionList> SelectAllStockTransactionsAsync() {
            return base.Channel.SelectAllStockTransactionsAsync();
        }
        
        public Client.ServiceReferenceVirWallet.StockTransactionList SelectStockTransactionsByUser(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SelectStockTransactionsByUser(user);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockTransactionList> SelectStockTransactionsByUserAsync(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SelectStockTransactionsByUserAsync(user);
        }
        
        public int InsertStockTransaction(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction) {
            return base.Channel.InsertStockTransaction(StockTransaction);
        }
        
        public System.Threading.Tasks.Task<int> InsertStockTransactionAsync(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction) {
            return base.Channel.InsertStockTransactionAsync(StockTransaction);
        }
        
        public int UpdateStockTransaction(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction) {
            return base.Channel.UpdateStockTransaction(StockTransaction);
        }
        
        public System.Threading.Tasks.Task<int> UpdateStockTransactionAsync(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction) {
            return base.Channel.UpdateStockTransactionAsync(StockTransaction);
        }
        
        public int DeleteStockTransaction(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction) {
            return base.Channel.DeleteStockTransaction(StockTransaction);
        }
        
        public System.Threading.Tasks.Task<int> DeleteStockTransactionAsync(Client.ServiceReferenceVirWallet.StockTransaction StockTransaction) {
            return base.Channel.DeleteStockTransactionAsync(StockTransaction);
        }
        
        public Client.ServiceReferenceVirWallet.ForeignExchangeWalletList SelectAllForeignExchangeWallets() {
            return base.Channel.SelectAllForeignExchangeWallets();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeWalletList> SelectAllForeignExchangeWalletsAsync() {
            return base.Channel.SelectAllForeignExchangeWalletsAsync();
        }
        
        public Client.ServiceReferenceVirWallet.ForeignExchangeWalletList SelectForeignExchangeWalletsByUser(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SelectForeignExchangeWalletsByUser(user);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.ForeignExchangeWalletList> SelectForeignExchangeWalletsByUserAsync(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SelectForeignExchangeWalletsByUserAsync(user);
        }
        
        public int InsertForeignExchangeWallet(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet) {
            return base.Channel.InsertForeignExchangeWallet(foreignExchangeWallet);
        }
        
        public System.Threading.Tasks.Task<int> InsertForeignExchangeWalletAsync(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet) {
            return base.Channel.InsertForeignExchangeWalletAsync(foreignExchangeWallet);
        }
        
        public int UpdateForeignExchangeWallet(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet) {
            return base.Channel.UpdateForeignExchangeWallet(foreignExchangeWallet);
        }
        
        public System.Threading.Tasks.Task<int> UpdateForeignExchangeWalletAsync(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet) {
            return base.Channel.UpdateForeignExchangeWalletAsync(foreignExchangeWallet);
        }
        
        public int DeleteForeignExchangeWallet(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet) {
            return base.Channel.DeleteForeignExchangeWallet(foreignExchangeWallet);
        }
        
        public System.Threading.Tasks.Task<int> DeleteForeignExchangeWalletAsync(Client.ServiceReferenceVirWallet.ForeignExchangeWallet foreignExchangeWallet) {
            return base.Channel.DeleteForeignExchangeWalletAsync(foreignExchangeWallet);
        }
        
        public Client.ServiceReferenceVirWallet.StockWalletList SelectAllStockWallets() {
            return base.Channel.SelectAllStockWallets();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockWalletList> SelectAllStockWalletsAsync() {
            return base.Channel.SelectAllStockWalletsAsync();
        }
        
        public Client.ServiceReferenceVirWallet.StockWalletList SelectStockWalletsByUser(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SelectStockWalletsByUser(user);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReferenceVirWallet.StockWalletList> SelectStockWalletsByUserAsync(Client.ServiceReferenceVirWallet.User user) {
            return base.Channel.SelectStockWalletsByUserAsync(user);
        }
        
        public int InsertStockWallet(Client.ServiceReferenceVirWallet.StockWallet stockWallet) {
            return base.Channel.InsertStockWallet(stockWallet);
        }
        
        public System.Threading.Tasks.Task<int> InsertStockWalletAsync(Client.ServiceReferenceVirWallet.StockWallet stockWallet) {
            return base.Channel.InsertStockWalletAsync(stockWallet);
        }
        
        public int UpdateStockWallet(Client.ServiceReferenceVirWallet.StockWallet stockWallet) {
            return base.Channel.UpdateStockWallet(stockWallet);
        }
        
        public System.Threading.Tasks.Task<int> UpdateStockWalletAsync(Client.ServiceReferenceVirWallet.StockWallet stockWallet) {
            return base.Channel.UpdateStockWalletAsync(stockWallet);
        }
        
        public int DeleteStockWallet(Client.ServiceReferenceVirWallet.StockWallet stockWallet) {
            return base.Channel.DeleteStockWallet(stockWallet);
        }
        
        public System.Threading.Tasks.Task<int> DeleteStockWalletAsync(Client.ServiceReferenceVirWallet.StockWallet stockWallet) {
            return base.Channel.DeleteStockWalletAsync(stockWallet);
        }
    }
}
